// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public enum MESSAGETYPE : int
{
  BEGIN = 0,
  INNER_CLOSE_CLIENT = 1,
  REQUEST_REGISTER = 2,
  RESPONSE_REGISTER = 3,
  REQUEST_HEARTBEAT = 4,
  RESPONSE_HEARTBEAT = 5,
  REQUEST_PLAYERMOVE = 100,
  RESPONSE_PLAYERMOVE = 101,
  NOTICE_PLAYERPOSITION = 102,
  END = 103,
};

public enum Content : byte
{
  NONE = 0,
  INNER_CLOSE_CLIENT = 1,
  REQUEST_REGISTER = 2,
  RESPONSE_REGISTER = 3,
  REQUEST_HEARTBEAT = 4,
  RESPONSE_HEARTBEAT = 5,
  REQUEST_PLAYERMOVE = 6,
  RESPONSE_PLAYERMOVE = 7,
  NOTICE_PLAYERPOSITION = 8,
};



static public class ContentVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, byte typeId, uint tablePos)
  {
    bool result = true;
    switch((Content)typeId)
    {
      case Content.INNER_CLOSE_CLIENT:
        result = protocol.INNER_CLOSE_CLIENTVerify.Verify(verifier, tablePos);
        break;
      case Content.REQUEST_REGISTER:
        result = protocol.REQUEST_REGISTERVerify.Verify(verifier, tablePos);
        break;
      case Content.RESPONSE_REGISTER:
        result = protocol.RESPONSE_REGISTERVerify.Verify(verifier, tablePos);
        break;
      case Content.REQUEST_HEARTBEAT:
        result = protocol.REQUEST_HEARTBEATVerify.Verify(verifier, tablePos);
        break;
      case Content.RESPONSE_HEARTBEAT:
        result = protocol.RESPONSE_HEARTBEATVerify.Verify(verifier, tablePos);
        break;
      case Content.REQUEST_PLAYERMOVE:
        result = protocol.REQUEST_PLAYERMOVEVerify.Verify(verifier, tablePos);
        break;
      case Content.RESPONSE_PLAYERMOVE:
        result = protocol.RESPONSE_PLAYERMOVEVerify.Verify(verifier, tablePos);
        break;
      case Content.NOTICE_PLAYERPOSITION:
        result = protocol.NOTICE_PLAYERPOSITIONVerify.Verify(verifier, tablePos);
        break;
      default: result = true;
        break;
    }
    return result;
  }
}

public struct INNER_CLOSE_CLIENT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static INNER_CLOSE_CLIENT GetRootAsINNER_CLOSE_CLIENT(ByteBuffer _bb) { return GetRootAsINNER_CLOSE_CLIENT(_bb, new INNER_CLOSE_CLIENT()); }
  public static INNER_CLOSE_CLIENT GetRootAsINNER_CLOSE_CLIENT(ByteBuffer _bb, INNER_CLOSE_CLIENT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public INNER_CLOSE_CLIENT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Completionkey { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<protocol.INNER_CLOSE_CLIENT> CreateINNER_CLOSE_CLIENT(FlatBufferBuilder builder,
      uint completionkey = 0) {
    builder.StartTable(1);
    INNER_CLOSE_CLIENT.AddCompletionkey(builder, completionkey);
    return INNER_CLOSE_CLIENT.EndINNER_CLOSE_CLIENT(builder);
  }

  public static void StartINNER_CLOSE_CLIENT(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddCompletionkey(FlatBufferBuilder builder, uint completionkey) { builder.AddUint(0, completionkey, 0); }
  public static Offset<protocol.INNER_CLOSE_CLIENT> EndINNER_CLOSE_CLIENT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.INNER_CLOSE_CLIENT>(o);
  }
}


static public class INNER_CLOSE_CLIENTVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Completionkey*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct REQUEST_REGISTER : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static REQUEST_REGISTER GetRootAsREQUEST_REGISTER(ByteBuffer _bb) { return GetRootAsREQUEST_REGISTER(_bb, new REQUEST_REGISTER()); }
  public static REQUEST_REGISTER GetRootAsREQUEST_REGISTER(ByteBuffer _bb, REQUEST_REGISTER obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public REQUEST_REGISTER __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlayerIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlayerIdArray() { return __p.__vector_as_array<byte>(4); }
  public string SecretKey { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSecretKeyBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSecretKeyBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSecretKeyArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<protocol.REQUEST_REGISTER> CreateREQUEST_REGISTER(FlatBufferBuilder builder,
      StringOffset player_idOffset = default(StringOffset),
      StringOffset secret_keyOffset = default(StringOffset)) {
    builder.StartTable(2);
    REQUEST_REGISTER.AddSecretKey(builder, secret_keyOffset);
    REQUEST_REGISTER.AddPlayerId(builder, player_idOffset);
    return REQUEST_REGISTER.EndREQUEST_REGISTER(builder);
  }

  public static void StartREQUEST_REGISTER(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayerId(FlatBufferBuilder builder, StringOffset playerIdOffset) { builder.AddOffset(0, playerIdOffset.Value, 0); }
  public static void AddSecretKey(FlatBufferBuilder builder, StringOffset secretKeyOffset) { builder.AddOffset(1, secretKeyOffset.Value, 0); }
  public static Offset<protocol.REQUEST_REGISTER> EndREQUEST_REGISTER(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.REQUEST_REGISTER>(o);
  }
}


static public class REQUEST_REGISTERVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PlayerId*/, false)
      && verifier.VerifyString(tablePos, 6 /*SecretKey*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct RESPONSE_REGISTER : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RESPONSE_REGISTER GetRootAsRESPONSE_REGISTER(ByteBuffer _bb) { return GetRootAsRESPONSE_REGISTER(_bb, new RESPONSE_REGISTER()); }
  public static RESPONSE_REGISTER GetRootAsRESPONSE_REGISTER(ByteBuffer _bb, RESPONSE_REGISTER obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RESPONSE_REGISTER __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlayerIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlayerIdArray() { return __p.__vector_as_array<byte>(4); }
  public bool Feedback { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<protocol.RESPONSE_REGISTER> CreateRESPONSE_REGISTER(FlatBufferBuilder builder,
      StringOffset player_idOffset = default(StringOffset),
      bool feedback = false) {
    builder.StartTable(2);
    RESPONSE_REGISTER.AddPlayerId(builder, player_idOffset);
    RESPONSE_REGISTER.AddFeedback(builder, feedback);
    return RESPONSE_REGISTER.EndRESPONSE_REGISTER(builder);
  }

  public static void StartRESPONSE_REGISTER(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayerId(FlatBufferBuilder builder, StringOffset playerIdOffset) { builder.AddOffset(0, playerIdOffset.Value, 0); }
  public static void AddFeedback(FlatBufferBuilder builder, bool feedback) { builder.AddBool(1, feedback, false); }
  public static Offset<protocol.RESPONSE_REGISTER> EndRESPONSE_REGISTER(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.RESPONSE_REGISTER>(o);
  }
}


static public class RESPONSE_REGISTERVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PlayerId*/, false)
      && verifier.VerifyField(tablePos, 6 /*Feedback*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct REQUEST_HEARTBEAT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static REQUEST_HEARTBEAT GetRootAsREQUEST_HEARTBEAT(ByteBuffer _bb) { return GetRootAsREQUEST_HEARTBEAT(_bb, new REQUEST_HEARTBEAT()); }
  public static REQUEST_HEARTBEAT GetRootAsREQUEST_HEARTBEAT(ByteBuffer _bb, REQUEST_HEARTBEAT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public REQUEST_HEARTBEAT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlayerIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlayerIdArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<protocol.REQUEST_HEARTBEAT> CreateREQUEST_HEARTBEAT(FlatBufferBuilder builder,
      StringOffset player_idOffset = default(StringOffset)) {
    builder.StartTable(1);
    REQUEST_HEARTBEAT.AddPlayerId(builder, player_idOffset);
    return REQUEST_HEARTBEAT.EndREQUEST_HEARTBEAT(builder);
  }

  public static void StartREQUEST_HEARTBEAT(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPlayerId(FlatBufferBuilder builder, StringOffset playerIdOffset) { builder.AddOffset(0, playerIdOffset.Value, 0); }
  public static Offset<protocol.REQUEST_HEARTBEAT> EndREQUEST_HEARTBEAT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.REQUEST_HEARTBEAT>(o);
  }
}


static public class REQUEST_HEARTBEATVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PlayerId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct RESPONSE_HEARTBEAT : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RESPONSE_HEARTBEAT GetRootAsRESPONSE_HEARTBEAT(ByteBuffer _bb) { return GetRootAsRESPONSE_HEARTBEAT(_bb, new RESPONSE_HEARTBEAT()); }
  public static RESPONSE_HEARTBEAT GetRootAsRESPONSE_HEARTBEAT(ByteBuffer _bb, RESPONSE_HEARTBEAT obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RESPONSE_HEARTBEAT __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlayerIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlayerIdArray() { return __p.__vector_as_array<byte>(4); }
  public bool Feedback { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<protocol.RESPONSE_HEARTBEAT> CreateRESPONSE_HEARTBEAT(FlatBufferBuilder builder,
      StringOffset player_idOffset = default(StringOffset),
      bool feedback = false) {
    builder.StartTable(2);
    RESPONSE_HEARTBEAT.AddPlayerId(builder, player_idOffset);
    RESPONSE_HEARTBEAT.AddFeedback(builder, feedback);
    return RESPONSE_HEARTBEAT.EndRESPONSE_HEARTBEAT(builder);
  }

  public static void StartRESPONSE_HEARTBEAT(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlayerId(FlatBufferBuilder builder, StringOffset playerIdOffset) { builder.AddOffset(0, playerIdOffset.Value, 0); }
  public static void AddFeedback(FlatBufferBuilder builder, bool feedback) { builder.AddBool(1, feedback, false); }
  public static Offset<protocol.RESPONSE_HEARTBEAT> EndRESPONSE_HEARTBEAT(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.RESPONSE_HEARTBEAT>(o);
  }
}


static public class RESPONSE_HEARTBEATVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PlayerId*/, false)
      && verifier.VerifyField(tablePos, 6 /*Feedback*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct REQUEST_PLAYERMOVE : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static REQUEST_PLAYERMOVE GetRootAsREQUEST_PLAYERMOVE(ByteBuffer _bb) { return GetRootAsREQUEST_PLAYERMOVE(_bb, new REQUEST_PLAYERMOVE()); }
  public static REQUEST_PLAYERMOVE GetRootAsREQUEST_PLAYERMOVE(ByteBuffer _bb, REQUEST_PLAYERMOVE obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public REQUEST_PLAYERMOVE __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlayerIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlayerIdArray() { return __p.__vector_as_array<byte>(4); }
  public float RotationX { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MoveSpeed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MoveStartTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Duration { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<protocol.REQUEST_PLAYERMOVE> CreateREQUEST_PLAYERMOVE(FlatBufferBuilder builder,
      StringOffset player_idOffset = default(StringOffset),
      float rotation_x = 0.0f,
      float move_speed = 0.0f,
      float move_start_time = 0.0f,
      float duration = 0.0f) {
    builder.StartTable(5);
    REQUEST_PLAYERMOVE.AddDuration(builder, duration);
    REQUEST_PLAYERMOVE.AddMoveStartTime(builder, move_start_time);
    REQUEST_PLAYERMOVE.AddMoveSpeed(builder, move_speed);
    REQUEST_PLAYERMOVE.AddRotationX(builder, rotation_x);
    REQUEST_PLAYERMOVE.AddPlayerId(builder, player_idOffset);
    return REQUEST_PLAYERMOVE.EndREQUEST_PLAYERMOVE(builder);
  }

  public static void StartREQUEST_PLAYERMOVE(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddPlayerId(FlatBufferBuilder builder, StringOffset playerIdOffset) { builder.AddOffset(0, playerIdOffset.Value, 0); }
  public static void AddRotationX(FlatBufferBuilder builder, float rotationX) { builder.AddFloat(1, rotationX, 0.0f); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, float moveSpeed) { builder.AddFloat(2, moveSpeed, 0.0f); }
  public static void AddMoveStartTime(FlatBufferBuilder builder, float moveStartTime) { builder.AddFloat(3, moveStartTime, 0.0f); }
  public static void AddDuration(FlatBufferBuilder builder, float duration) { builder.AddFloat(4, duration, 0.0f); }
  public static Offset<protocol.REQUEST_PLAYERMOVE> EndREQUEST_PLAYERMOVE(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.REQUEST_PLAYERMOVE>(o);
  }
}


static public class REQUEST_PLAYERMOVEVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PlayerId*/, false)
      && verifier.VerifyField(tablePos, 6 /*RotationX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*MoveSpeed*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*MoveStartTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Duration*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct RESPONSE_PLAYERMOVE : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RESPONSE_PLAYERMOVE GetRootAsRESPONSE_PLAYERMOVE(ByteBuffer _bb) { return GetRootAsRESPONSE_PLAYERMOVE(_bb, new RESPONSE_PLAYERMOVE()); }
  public static RESPONSE_PLAYERMOVE GetRootAsRESPONSE_PLAYERMOVE(ByteBuffer _bb, RESPONSE_PLAYERMOVE obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RESPONSE_PLAYERMOVE __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Feedback { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<protocol.RESPONSE_PLAYERMOVE> CreateRESPONSE_PLAYERMOVE(FlatBufferBuilder builder,
      bool feedback = false) {
    builder.StartTable(1);
    RESPONSE_PLAYERMOVE.AddFeedback(builder, feedback);
    return RESPONSE_PLAYERMOVE.EndRESPONSE_PLAYERMOVE(builder);
  }

  public static void StartRESPONSE_PLAYERMOVE(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFeedback(FlatBufferBuilder builder, bool feedback) { builder.AddBool(0, feedback, false); }
  public static Offset<protocol.RESPONSE_PLAYERMOVE> EndRESPONSE_PLAYERMOVE(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.RESPONSE_PLAYERMOVE>(o);
  }
}


static public class RESPONSE_PLAYERMOVEVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Feedback*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct NOTICE_PLAYERPOSITION : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static NOTICE_PLAYERPOSITION GetRootAsNOTICE_PLAYERPOSITION(ByteBuffer _bb) { return GetRootAsNOTICE_PLAYERPOSITION(_bb, new NOTICE_PLAYERPOSITION()); }
  public static NOTICE_PLAYERPOSITION GetRootAsNOTICE_PLAYERPOSITION(ByteBuffer _bb, NOTICE_PLAYERPOSITION obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NOTICE_PLAYERPOSITION __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PlayerId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlayerIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlayerIdArray() { return __p.__vector_as_array<byte>(4); }
  public float PositionX { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PositionY { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PositionZ { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<protocol.NOTICE_PLAYERPOSITION> CreateNOTICE_PLAYERPOSITION(FlatBufferBuilder builder,
      StringOffset player_idOffset = default(StringOffset),
      float position_x = 0.0f,
      float position_y = 0.0f,
      float position_z = 0.0f) {
    builder.StartTable(4);
    NOTICE_PLAYERPOSITION.AddPositionZ(builder, position_z);
    NOTICE_PLAYERPOSITION.AddPositionY(builder, position_y);
    NOTICE_PLAYERPOSITION.AddPositionX(builder, position_x);
    NOTICE_PLAYERPOSITION.AddPlayerId(builder, player_idOffset);
    return NOTICE_PLAYERPOSITION.EndNOTICE_PLAYERPOSITION(builder);
  }

  public static void StartNOTICE_PLAYERPOSITION(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPlayerId(FlatBufferBuilder builder, StringOffset playerIdOffset) { builder.AddOffset(0, playerIdOffset.Value, 0); }
  public static void AddPositionX(FlatBufferBuilder builder, float positionX) { builder.AddFloat(1, positionX, 0.0f); }
  public static void AddPositionY(FlatBufferBuilder builder, float positionY) { builder.AddFloat(2, positionY, 0.0f); }
  public static void AddPositionZ(FlatBufferBuilder builder, float positionZ) { builder.AddFloat(3, positionZ, 0.0f); }
  public static Offset<protocol.NOTICE_PLAYERPOSITION> EndNOTICE_PLAYERPOSITION(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.NOTICE_PLAYERPOSITION>(o);
  }
}


static public class NOTICE_PLAYERPOSITIONVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*PlayerId*/, false)
      && verifier.VerifyField(tablePos, 6 /*PositionX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*PositionY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*PositionZ*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SERVER_PROTOCOL : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SERVER_PROTOCOL GetRootAsSERVER_PROTOCOL(ByteBuffer _bb) { return GetRootAsSERVER_PROTOCOL(_bb, new SERVER_PROTOCOL()); }
  public static SERVER_PROTOCOL GetRootAsSERVER_PROTOCOL(ByteBuffer _bb, SERVER_PROTOCOL obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifySERVER_PROTOCOL(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, SERVER_PROTOCOLVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SERVER_PROTOCOL __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public protocol.MESSAGETYPE MessageType { get { int o = __p.__offset(4); return o != 0 ? (protocol.MESSAGETYPE)__p.bb.GetInt(o + __p.bb_pos) : protocol.MESSAGETYPE.BEGIN; } }
  public protocol.Content ContentType { get { int o = __p.__offset(6); return o != 0 ? (protocol.Content)__p.bb.Get(o + __p.bb_pos) : protocol.Content.NONE; } }
  public TTable? Content<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public protocol.INNER_CLOSE_CLIENT ContentAsINNER_CLOSE_CLIENT() { return Content<protocol.INNER_CLOSE_CLIENT>().Value; }
  public protocol.REQUEST_REGISTER ContentAsREQUEST_REGISTER() { return Content<protocol.REQUEST_REGISTER>().Value; }
  public protocol.RESPONSE_REGISTER ContentAsRESPONSE_REGISTER() { return Content<protocol.RESPONSE_REGISTER>().Value; }
  public protocol.REQUEST_HEARTBEAT ContentAsREQUEST_HEARTBEAT() { return Content<protocol.REQUEST_HEARTBEAT>().Value; }
  public protocol.RESPONSE_HEARTBEAT ContentAsRESPONSE_HEARTBEAT() { return Content<protocol.RESPONSE_HEARTBEAT>().Value; }
  public protocol.REQUEST_PLAYERMOVE ContentAsREQUEST_PLAYERMOVE() { return Content<protocol.REQUEST_PLAYERMOVE>().Value; }
  public protocol.RESPONSE_PLAYERMOVE ContentAsRESPONSE_PLAYERMOVE() { return Content<protocol.RESPONSE_PLAYERMOVE>().Value; }
  public protocol.NOTICE_PLAYERPOSITION ContentAsNOTICE_PLAYERPOSITION() { return Content<protocol.NOTICE_PLAYERPOSITION>().Value; }

  public static Offset<protocol.SERVER_PROTOCOL> CreateSERVER_PROTOCOL(FlatBufferBuilder builder,
      protocol.MESSAGETYPE message_type = protocol.MESSAGETYPE.BEGIN,
      protocol.Content content_type = protocol.Content.NONE,
      int contentOffset = 0) {
    builder.StartTable(3);
    SERVER_PROTOCOL.AddContent(builder, contentOffset);
    SERVER_PROTOCOL.AddMessageType(builder, message_type);
    SERVER_PROTOCOL.AddContentType(builder, content_type);
    return SERVER_PROTOCOL.EndSERVER_PROTOCOL(builder);
  }

  public static void StartSERVER_PROTOCOL(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMessageType(FlatBufferBuilder builder, protocol.MESSAGETYPE messageType) { builder.AddInt(0, (int)messageType, 0); }
  public static void AddContentType(FlatBufferBuilder builder, protocol.Content contentType) { builder.AddByte(1, (byte)contentType, 0); }
  public static void AddContent(FlatBufferBuilder builder, int contentOffset) { builder.AddOffset(2, contentOffset, 0); }
  public static Offset<protocol.SERVER_PROTOCOL> EndSERVER_PROTOCOL(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<protocol.SERVER_PROTOCOL>(o);
  }
  public static void FinishSERVER_PROTOCOLBuffer(FlatBufferBuilder builder, Offset<protocol.SERVER_PROTOCOL> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSERVER_PROTOCOLBuffer(FlatBufferBuilder builder, Offset<protocol.SERVER_PROTOCOL> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class SERVER_PROTOCOLVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MessageType*/, 4 /*protocol.MESSAGETYPE*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ContentType*/, 1 /*protocol.Content*/, 1, false)
      && verifier.VerifyUnion(tablePos, 6, 8 /*Content*/, protocol.ContentVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
